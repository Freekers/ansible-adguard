#THIS FILE DOES NOT NEED TO BE CHANGED
#UPDATE THE HOSTS FILE TO REFLECT YOUR SETUP

- hosts: adguard
  become: true
  tasks:
  - name: Update and upgrade apt packages
    apt:
       update_cache: yes
       upgrade: yes

  - name: Install required packages including UFW
    when: ufw == "true"
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - ufw
      - curl
      - tzdata
      - python3-pip
      - python3-websocket
      - python3-setuptools
      - resolvconf
      - apache2-utils #to generate adguard admin password

  - name: Install required packages excluding UFW
    when: ufw == "false"
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - curl
      - tzdata
      - python3-pip
      - python3-websocket
      - python3-setuptools
      - resolvconf
      - apache2-utils #to generate adguard admin password

  - name: Set system timezone
    timezone:
      name: "{{ timezone }}"

  - name: install galaxy roles
    command: ansible-galaxy install -r "{{ playbook_dir }}/requirements.yml"
    delegate_to: localhost
    become: false

  - name: Allow services in firewall
    when: ufw == "true"
    ufw:
      rule: allow
      state: enabled
      proto: any
      port: '{{ item }}'
    loop:
      - "22"
      - "53"
      - "80"
      - "443"
      - "853"

  - name: Temporarily use this nameserver during initial config and setup
    lineinfile:
      path: /etc/resolvconf/resolv.conf.d/head
      line: 'nameserver 80.80.80.80'
      insertafter: EOF
      
  - name: Set update flag and update resolvconf
    shell: resolvconf --enable-updates && resolvconf -u

# Not using a fixed UID/GID here to avoid collision
  - name: Create Adguard system user
    user:
       name: adguard
       password: '!'
       shell: /sbin/nologin
       state: present
       system: yes

  - name: Get Adguard uid
    getent:
      database: passwd
      key: adguard

  - name: Prepare Docker for IPv6
    when: ansible_default_ipv6.address | length > 0
    ignore_errors: yes
    blockinfile:
      path: /etc/docker/daemon.json
      marker: ""
      block: |
        {
          "ipv6": true,
          "fixed-cidr-v6": "fd00::/80"
        }
      create: yes

  - name: Install Docker and docker-compose
    include_role:
       name: geerlingguy.docker
    vars:
      - docker_package_state: latest
      - docker_install_compose: true
      - docker_compose_version: "1.25.5"
      - docker_users:
        - adguard

  - name: Install docker and docker-compose, for use with Ansible docker module
    pip:
      name: 
        - docker
        - docker-compose

  - name: Create directories
    file:
      path: "{{ item }}"
      state: directory
      owner: '{{ getent_passwd.adguard[1] }}'
      group: '{{ getent_passwd.adguard[1] }}'
    with_items:
      - /opt
      - /opt/adguard
      - /opt/adguard/work
      - /opt/adguard/conf
      - /opt/adguard/letsencrypt-config

  # I specifically have chosen not to uninstall (and purge) any services.
  # If you don't need/use them, I suggest you remove them, but I leave that up to you.
  - name: Stop conflicting services that occupy needed ports (53,80,443)
    become: true
    service:
      name: "{{ item }}"
      enabled: no
      state: stopped
    register: results
    loop:
      - systemd-resolved
      - dnsmasq
      - apache2
      - lighttpd
      - nginx
    failed_when: >-
     results is failed and
     "Could not find the requested service" not in results.msg|default('')     

  - name: Schedule root.hints update as monthly cronjob
    cron: 
      name: Update root.hints - Monthly
      minute: "5"
      hour: "5"
      day: "5"
      month: "*"
      weekday: "*"
      job: "curl -so /opt/adguard/root.hints https://www.internic.net/domain/named.root && docker restart unbound-{{ hostname }}"
      user: root
      
  - name: Download root.hints once manually
    get_url:
      url: https://www.internic.net/domain/named.root
      dest: /opt/adguard/root.hints

  - name: Create Docker .env file based on input from hosts file
    blockinfile:
      path: /opt/adguard/.env
      create: yes
      block: |
        TIMEZONE={{ timezone }}
        CRON={{ cron }}
        HOSTNAME={{ hostname }}
        UID={{ getent_passwd.adguard[1] }}

  - name: Copy Unbound conf
    copy:
      src: adguard-unbound.conf
      dest: /opt/adguard/adguard-unbound.conf

  - name: Copy AdGuardHome.yaml
    copy:
      src: AdGuardHome.yaml
      dest: /opt/adguard/conf/AdGuardHome.yaml

  - name: Update IPv4 Address in AdGuardHome.yaml
    replace:
      path: /opt/adguard/conf/AdGuardHome.yaml
      regexp: 'ipv4address'
      replace: '{{ ansible_default_ipv4.address }}'
  
  - name: Update Hostname in AdGuardHome.yaml
    replace:
      path: /opt/adguard/conf/AdGuardHome.yaml
      regexp: 'hostname'
      replace: '{{ hostname }}'

  - name: Update Admin username in AdGuardHome.yaml
    replace:
      path: /opt/adguard/conf/AdGuardHome.yaml
      regexp: 'adguarduser'
      replace: '{{ adguarduser }}'

  - name: Generate hash for Adguard admin password
    command: htpasswd -B -n -b {{ adguarduser }} {{ adguardpassword }}
    register: htpasswd_generate

  - name: Update Admin password in AdGuardHome.yaml
    replace:
      path: /opt/adguard/conf/AdGuardHome.yaml
      regexp: 'adguardpassword'
      replace: "{{ htpasswd_generate.stdout.split(':')[1] }}"

  - name: Copy Docker Compose
    copy:
      src: docker-compose.yml
      dest: /opt/adguard/docker-compose.yml

  - name: Deploy Stack using Docker Compose
    docker_compose:
      project_src: /opt/adguard
      state: present

  # Pack it up, we're done here  
  - name: Use Adguard IPv4 as resolver for localhost
    replace:
      path: /etc/resolvconf/resolv.conf.d/head
      regexp: 'nameserver 80.80.80.80'
      replace: 'nameserver {{ ansible_default_ipv4.address }}'

  - name: Add Adguard IPv6 as resolver for localhost
    when: ansible_default_ipv6.address | length > 0
    ignore_errors: yes
    lineinfile:
      dest: /etc/resolvconf/resolv.conf.d/head
      line: 'nameserver {{ ansible_default_ipv6.address }}'
      insertafter: EOF
      
  - name: Update resolvconf
    command: resolvconf -u

# Workaround to make sure our DNS resolver is still being used after a reboot.
# If you have a better method that sticks after a reboot, please open a PR. Thanks!
  - name: Quick and Dirty way to make sure ip6table rules stick after reboot
    when: ansible_default_ipv6.address | length > 0
    ignore_errors: yes
    include_role:
       name: oefenweb.rc_local
       apply:
        ignore_errors: yes #Will throw an error on Ubuntu 20.04 but seems to work anyhow..
    vars:
       - rc_local_commands:
           - ip6tables -t nat -A POSTROUTING -s fd00::/80 ! -o docker0 -j MASQUERADE
           - resolvconf -u

  - name: Make sure DNS resolver sticks after reboot
    when: ansible_default_ipv6.address | length == 0
    ignore_errors: yes
    include_role:
       name: oefenweb.rc_local
       apply:
        ignore_errors: yes #Will throw an error on Ubuntu 20.04 but seems to work anyhow..
    vars:
       - rc_local_commands:
           - resolvconf -u

  - name: Remove useless packages from the cache
    apt:
      autoclean: yes
      autoremove: yes

  - name: Display post install message
    debug:
      msg:
        - '*** AdGuard Home Installation Completed Successfully! ***'
        - '*** The admin interface of your instance can be accessed via {{ hostname }} ***'
        - '*** NOTE: It can take up to 5 minutes before AdGuard Home will be accessible ***'
        - '*** This is due to Lets Encrypt certificate creation process, please be patient! ***'
        - '*** For more information, please refer to the Usage Instructions in the README ***'
