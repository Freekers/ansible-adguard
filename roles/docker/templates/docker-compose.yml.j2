version: "3.3"

networks:
  traefik_proxy:
    name: traefik_proxy
  backend:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.0/24
         gateway: 10.5.0.1
         ip_range: 10.5.0.5/30

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: {{dockerrestartpolicy}}
    networks:
      - traefik_proxy
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 853
        published: 853
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "/srv/docker/traefik2/rules:/rules"
      - "/srv/docker/traefik2/acme:/letsencrypt"
      - "/srv/docker/traefik2/traefik.yaml:/etc/traefik/traefik.yaml"
    environment:
      - TZ={{ntp_timezone}}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      - "traefik.http.routers.traefikdashboard.rule=Host(`traefik.{{hostname}}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.traefikdashboard.entrypoints=websecure"
      - "traefik.http.routers.traefikdashboard.service=api@internal"
      - "traefik.http.routers.traefikdashboard.tls=true"
      - "traefik.http.routers.traefikdashboard.tls.certresolver=lets-encrypt"
      - "traefik.http.routers.traefikdashboard.middlewares=middlewares-ipwhitelist@file, redirect-web-to-websecure@internal, middlewares-rate-limit@file"

  adguard:
    image: adguard/adguardhome:latest
    container_name: adguard
    restart: {{dockerrestartpolicy}}
    networks:
      - traefik_proxy
      - backend
    environment:
      - TZ={{ntp_timezone}}
    volumes:
      - /srv/docker/adguard/conf:/opt/adguardhome/conf
      - /srv/docker/adguard/work:/opt/adguardhome/work
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"

      # web interface
      - "traefik.http.routers.adfree-gui.rule=Host(`adguard.{{hostname}}`)"
      - "traefik.http.routers.adfree-gui.entrypoints=websecure"
      - "traefik.http.routers.adfree-gui.tls.certresolver=lets-encrypt"
      - "traefik.http.services.adfree-gui.loadbalancer.server.port=80"

      # DNS-over-TLS
      - "traefik.tcp.routers.dnsovertls.rule=HostSNI(`adguard.{{hostname}}`)"
      - "traefik.tcp.routers.dnsovertls.entrypoints=dnsovertls"
      - "traefik.tcp.routers.dnsovertls.tls=true"
      - "traefik.tcp.routers.dnsovertls.tls.certresolver=lets-encrypt"
      - "traefik.tcp.routers.dnsovertls.service=adguard-tcp"
      - "traefik.tcp.services.adguard-tcp.loadbalancer.server.port=53"

      # Normal DNS coming in on 53 TCP, no TLS
      - "traefik.tcp.routers.dns.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.dns.entrypoints=dns"
      - "traefik.tcp.routers.dns.service=adguard-tcp"

      # Normal DNS coming in on 53 UDP
      - "traefik.udp.routers.udpdns.entrypoints=udpdns"
      - "traefik.udp.routers.udpdns.service=adguard-udp"
      - "traefik.udp.services.adguard-udp.loadbalancer.server.port=53"

  # blocky:
  #   image: spx01/blocky
  #   container_name: blocky
  #   restart: {{dockerrestartpolicy}}
  #   networks:
  #     - traefik_proxy
  #     - backend
  #   environment:
  #     - TZ={{ntp_timezone}}
  #   volumes:
  #     - /srv/docker/blocky/blocky.yaml:/app/config.yml
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=traefik_proxy"

  #     # web interface
  #     # - traefik.http.routers.blocky.rule=Host(`blocky.{{hostname}}`)
  #     # - traefik.http.routers.blocky.entrypoints=websecure
  #     # - traefik.http.routers.blocky.tls.certresolver=lets-encrypt
  #     # - traefik.http.services.blocky.loadbalancer.server.port=80

  #     # DNS-over-TLS
  #     - "traefik.tcp.routers.dnsovertls.rule=HostSNI(`blocky.{{hostname}}`)"
  #     - "traefik.tcp.routers.dnsovertls.entrypoints=dnsovertls"
  #     - "traefik.tcp.routers.dnsovertls.tls=true"
  #     - "traefik.tcp.routers.dnsovertls.tls.certresolver=lets-encrypt"
  #     - "traefik.tcp.routers.dnsovertls.service=blocky"

  #     # Normal DNS coming in on 53 TCP, no TLS
  #     - "traefik.tcp.routers.dns.rule=HostSNI(`blocky.{{hostname}}`)"
  #     - "traefik.tcp.routers.dns.entrypoints=dns"
  #     - "traefik.tcp.routers.dns.tls=false"
  #     - "traefik.tcp.routers.dns.service=blocky"

  #     # recieves traffic from both the TLS and non-TLS traefik routers
  #     - "traefik.tcp.services.blocky.loadbalancer.server.port=53"

  #     # Normal DNS coming in on 53 UDP
  #     - "traefik.udp.routers.udpdns.entrypoints=udpdns"
  #     - "traefik.udp.routers.udpdns.service=blocky"
  #     - "traefik.udp.services.blocky.loadbalancer.server.port=53"

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    networks:
      - traefik_proxy
    restart: {{dockerrestartpolicy}}
    environment:
      - TZ={{ntp_timezone}}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /srv/docker/portainer:/data
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik_proxy
      - traefik.http.routers.portainer.rule=Host(`portainer.{{hostname}}`)
      - traefik.http.routers.portainer.entrypoints=websecure
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=lets-encrypt
      - traefik.http.routers.portainer.service=portainer
      - traefik.http.routers.portainer.middlewares=middlewares-ipwhitelist@file, middlewares-compress@file
      - traefik.http.services.portainer.loadbalancer.server.port=9443
      - traefik.http.services.portainer.loadbalancer.server.scheme=https


  unbound:
    image: crazymax/unbound
    container_name: unbound
    restart: {{dockerrestartpolicy}}
    networks:
      backend:
        ipv4_address: 10.5.0.6
    ports:
      - "5053:5053/tcp"
      - "5053:5053/udp"
    volumes:
      - "/srv/docker/unbound/forward-records.conf:/config/forward-records.conf:ro"

  watchtower:
    container_name: watchtower
    restart: {{dockerrestartpolicy}}
    network_mode: bridge
    image: containrrr/watchtower:latest
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - TZ={{ntp_timezone}}
      - WATCHTOWER_DEBUG=false
      - WATCHTOWER_RUN_ONCE=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=false
